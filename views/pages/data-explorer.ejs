
<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
  <script src="/js/highcharts/highcharts.js"></script>
  <script src="/js/highcharts/highcharts-more.js"></script>
  <script src="/js/highcharts/exporting.js"></script>
  <script src="/js/highcharts/data.js"></script>

  <!-- Additional files for the Highslide popup effect -->
  <script src="https://www.highcharts.com/media/com_demo/js/highslide-full.min.js"></script>
  <script src="https://www.highcharts.com/media/com_demo/js/highslide.config.js" charset="utf-8"></script>
  <link rel="stylesheet" type="text/css" href="https://www.highcharts.com/media/com_demo/css/highslide.css" />


</head>

<body>
  <% include ../partials/nav.ejs %>
    
    <div class="col-md-12">
      <div id="chart-PL_TEMP_1"></div>
    </div>


    <div class="row">

      <div class="col-md-4">
        <div class="card text-center" >
          <div class="card-header"><strong>Chart Options</strong></div>
          <div class="card-body">
            
            <button type="button" class="btn btn-primary" data-toggle="button" onclick="toggleChartPoints();">
              Show Points
            </button>
            <button type="button" class="btn btn-primary" data-toggle="button" onclick="toggleChartLines();">
              Show Lines
            </button>

          </div>
        </div>
      </div>
    
      <div class="col-md-8">
        <div class="card text-center" >
          <div class="card-header"><strong>Data Filtering Options</strong></div>
          <!-- (based on onboard/dataframe clock) -->
          <div class="card-body">
            
            <button type="button" class="btn btn-primary" data-toggle="button" onclick="dataFilterFull();">
              Show All Data (0-24h)
            </button>
            <button type="button" class="btn btn-info" data-toggle="button" onclick="dataFilterMorning();">
              Show Day Data (6-18h)
            </button>
            <button type="button" class="btn btn-warning" data-toggle="button" onclick="dataFilterAfternoon();">
              Show Night Data (18h-6h)
            </button>

          </div>
        </div>
      </div>
    
    </div>  


</body>
</html>



<script type="text/javascript">

  var seriesData = [];

  $(document).ready(function(){
    //query and set chart data after full page load
    setChartData();
  });


  
  // construct chart elements
  var charts = [];
  charts['PL_TEMP_1'] = Highcharts.chart('chart-PL_TEMP_1', {
          chart: {
              zoomType: 'x'
          },
          title: {
              text: 'ROBUSTA 1B: PL_TEMP_1'
          },
          subtitle: {
              text: ' Select a region to zoom in.'
          },
          xAxis: {
              type: 'datetime'
          },
          yAxis: {
              title: {
                  text: 'Temperature (째C)'
              }
          },
          legend: {
              enabled: false
          },
          credits: {
            enabled: false
          },

          tooltip: {
              xDateFormat: '%Y-%m-%d  %H:%M:%S',
          },

          plotOptions: {
              area: {
                  fillColor: {
                      linearGradient: {
                          x1: 0,
                          y1: 0,
                          x2: 0,
                          y2: 1
                      },
                      stops: [
                          [0, Highcharts.getOptions().colors[0]],
                          [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
                      ]
                  },
                  marker: {
                      radius: 4
                  },
                  lineWidth: 2,
                  states: {
                      hover: {
                          lineWidth: 1
                      }
                  },
                  threshold: null
              }
          },

          series: [{
              type: 'area',
              name: 'PL_TEMP_1 (째C)',
              data: []
          }]
      });

  charts['PL_TEMP_1'].showLoading();



  function setChartData(){

    
    var url = '/api/get/FX6FR/PL_TEMP_1/asc/0';
    // var url = '/api/sample/chartData';

    $.getJSON(url, function (dataRaw) {

      for (var i=0; i<dataRaw.length; i++){
        if (dataRaw[i][0] > 1483228800) { // only display data after 2017
          seriesData.push([ dataRaw[i][0]*1000, dataRaw[i][1] ]);
        }
      }

      charts['PL_TEMP_1'].series[0].setData(seriesData,true);
      charts['PL_TEMP_1'].setTitle({}, {text: "Data points: "+seriesData.length+" Select a region to zoom in."});
      charts['PL_TEMP_1'].hideLoading();
        
    });

  }  



// chart UI operations

function toggleChartPoints(){

  charts['PL_TEMP_1'].showLoading();
  var newSeries = { type: 'scatter',
                    name: 'PL_TEMP_1 (째C)',
                    data: seriesData
                  };

  charts['PL_TEMP_1'].series[0].remove();
  charts['PL_TEMP_1'].addSeries(newSeries);
  charts['PL_TEMP_1'].hideLoading();

}


function toggleChartLines(){

  charts['PL_TEMP_1'].showLoading();
  var newSeries = { type: 'area',
                    name: 'PL_TEMP_1 (째C)',
                    data: seriesData
                  };

  charts['PL_TEMP_1'].series[0].remove();
  charts['PL_TEMP_1'].addSeries(newSeries);
  charts['PL_TEMP_1'].hideLoading();

}


function dataFilterFull(){
  charts['PL_TEMP_1'].showLoading();
  charts['PL_TEMP_1'].series[0].setData(seriesData,true);
  charts['PL_TEMP_1'].hideLoading();
}




function dataFilterMorning(){
  charts['PL_TEMP_1'].showLoading();
  var filteredData = [];
  var cutHour = 12;
  for (var i=0; i<seriesData.length; i++){
    
    var date = new Date( seriesData[i][0] *1000);
  
    if (date.getUTCHours() > 6 && date.getUTCHours() < 18){
      console.log(date.getUTCHours());
      filteredData.push([ seriesData[i][0], seriesData[i][1] ]);
    }

  }

  // console.log( seriesData, filteredData );
  charts['PL_TEMP_1'].series[0].setData(filteredData,true);
  charts['PL_TEMP_1'].hideLoading();
}


function dataFilterAfternoon(){
  charts['PL_TEMP_1'].showLoading();
  var filteredData = [];
  var cutHour = 18;
  for (var i=0; i<seriesData.length; i++){
    
    var date = new Date( seriesData[i][0] *1000);
  
    if (date.getUTCHours() < 6 && date.getUTCHours() > 18){
      console.log(date.getUTCHours());
      filteredData.push([ seriesData[i][0], seriesData[i][1] ]);
    }

  }

  // console.log( seriesData, filteredData );
  charts['PL_TEMP_1'].series[0].setData(filteredData,true);
  charts['PL_TEMP_1'].hideLoading();

}


</script>




